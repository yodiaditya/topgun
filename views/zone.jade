script(src='/javascripts/jQueryRotateCompressed.2.1.js')
script(src='/javascripts/jquery.hotkeys.js')
    
script
  
  /**
   * Simple convert Lat,Long into x,y 
   * http://stackoverflow.com/questions/1019997/convert-lat-longs-to-x-y-co-ordinates 
   */  
  function convertMap(lat, lon){
      var y = ((-1 * lat) + 90) * (map_width / 180);
      var x = (lon + 180) * (map_height / 360);
      var result = {x:x,y:y};
      return result;
  }

  /** Converts numeric degrees to radians */
  if (typeof(Number.prototype.toRad) === "undefined") {
    Number.prototype.toRad = function() {
      return this * Math.PI / 180;
    }
  }

  /** Converts radians to numeric (signed) degrees */
  if (typeof(Number.prototype.toDeg) === "undefined") {
    Number.prototype.toDeg = function() {
      return this * 180 / Math.PI;
    }
  }

  $(document).ready(function(){
    
    now.core.on('disconnect', function() {
      now.clientDisconnect();
    });

    now.ready(function(){
      $('#begining-game').remove(); 
      now.startGame();
    });
  
    $(document).bind('keydown', 'left',function (e){
      now.userMovement(-5);
      $('#cockpit-viewer').rotate({ animateTo: -10});
      e.preventDefault();
    });

    $(document).bind('keydown', 'right',function (e){
      now.userMovement(5);
      $('#cockpit-viewer').rotate({ animateTo: 10 });
      e.preventDefault();
    });
    
    $(document).bind('keyup', 'left',function (e){
      $('#cockpit-viewer').rotate( { animateTo:0 });
      e.preventDefault();
    });

    $(document).bind('keyup', 'right',function (e){
      $('#cockpit-viewer').rotate({ animateTo:0 });
      e.preventDefault();
    });


    $(document).bind('keydown', 'up',function (e){
      now.userSpeed(1);
      e.preventDefault();
    });
    
    $(document).bind('keydown', 'down',function (e){
      now.userSpeed(0);
      e.preventDefault();
    });
    
    now.updateUserSpeed = function(speed){
      $('#userspeed').remove();
      $('#speedo').append('<div id="userspeed"> <p>'+speed+' km/s</p> </div>');
    }

    now.updateUserDegree = function(degree){
      $('#userdegree').remove();
      $('#degrees').append('<div id="userdegree"> <p>'+degree+' &deg; </p></div>');
    }
    
    now.userPosition = function(player, userList, missileList) {
      map_width = 300;
      map_height = 300;

      $('div.mapenemy').remove();
      $('div.missile-map').remove();
      $('div.distance-enemy').remove();
      $('div.mapplayer').remove();
      $('div.enemy-cursor').remove();
      
      var userCoordinate = convertMap(player.latitude,player.longitude);
      var userX = userCoordinate.x-241; 
      var userY = userCoordinate.y-133;
      userX = userX*33;
      userY = userY*17;
      
      $('#mapbox').append( $('<div id="player-plane" class="mapplayer" style="margin-left:'+ userX +'px;margin-top:'+ userY+'px;"></div>'));
      $('#player-plane').rotate(player.degree);

      var countEnemy = 0;

      console.log(missileList);
      
      // Missile on Radar
      for(var missVal in missileList) {
        var rCoordinate = convertMap(missileList[missVal]['rlatitude'], missileList[missVal]['rlongitude']);
        var rX = rCoordinate.x-241; 
        var rY = rCoordinate.y-133;
        rX = rX*33;
        rY = rY*17;
        
        $('#mapbox').append( $('<div id="missile-pos-'+ missVal +'" class="missile-map" style="margin-left:'+ rX +'px;margin-top:'+ rY+'px;"></div>'));
      
      }

      for(var keyVal in userList) {
        countEnemy = keyVal;

        if( player.id !== userList[keyVal]['id'] ){
          
          // Calculate Distance player - enemy
          var lat1 = player.latitude;
          var lat2 = userList[keyVal]['latitude'];
          var lon1 = player.longitude;
          var lon2 = userList[keyVal]['longitude'];
          
          var R = 6371; // km
          var dLat = (lat2-lat1).toRad();
          var dLon = (lon2-lon1).toRad();
          var lat1 = lat1.toRad();
          var lat2 = lat2.toRad();

          var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                  Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2); 
          var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
          var d = R * c;

          // Calculate Degree from Player position with Enemy Position 
          var plat1 = player.latitude.toRad(), plat2 = userList[keyVal].latitude.toRad();
          var dLon = (userList[keyVal].longitude - player.longitude).toRad();

          var y = Math.sin(dLon) * Math.cos(plat2);
          var x = Math.cos(plat1)*Math.sin(plat2) -
                  Math.sin(plat1)*Math.cos(plat2)*Math.cos(dLon);
          var brng = Math.atan2(y, x);
          var courses = (brng.toDeg()+360) % 360;

          // Mapping Enemy Coordinate 
          var enemyCoordinate = convertMap(userList[keyVal]['latitude'],userList[keyVal]['longitude']);
          var enemyX = enemyCoordinate.x-241; 
          var enemyY = enemyCoordinate.y-133;
          enemyX = enemyX*33;
          enemyY = enemyY*17;

          // Cockpit View 
          var enemyDegree = courses;
          var enemyCockpit, eMarginTop, eMarginLeft;

          console.log(' E degree : ' + userList[keyVal]['degree'] + ', P degree : ' + player.degree + ' , Points P-E:' + enemyDegree);
    
          coursesPlayerLeft = player.degree - 15;
          coursesPlayerRight = player.degree + 15;

          var showEnemy = 0;
          diffDegree = Math.min(Math.abs(userList[keyVal]['degree'] - player.degree),360-Math.abs(userList[keyVal]['degree'] - player.degree))

          if(diffDegree > 90){
            enemyHead = 'enemy-on-front';
          }else{
            enemyHead = 'enemy-on-back';
          }

          if(enemyDegree > 345 || enemyDegree < 15){
            if(coursesPlayerLeft < 0) {
              coursesPlayerLeft = coursesPlayerLeft + 360;
            }

            if(coursesPlayerRight > 360) {
              coursesPlayerRight = coursesPlayerRight - 360;
            }
            
            if(enemyDegree < coursesPlayerRight) {
              balanceRight = 360 - coursesPlayerLeft;
              enemyOnCockpit = enemyDegree + balanceRight;

            }else if(enemyDegree > coursesPlayerLeft){
              enemyOnCockpit = enemyDegree - coursesPlayerLeft;
            } 
              
            //console.log(' Limit : Left:' + coursesPlayerLeft + ' , Right: ' + coursesPlayerRight + ', cockpit ' + enemyOnCockpit);
 
            eMarginTop = 'margin-top:85px;';
            eMarginLeft = 'margin-left: '+ enemyOnCockpit*18.5 +'px;';
            
            $('#enemy-position').append('<div id="enemy-' + keyVal + '-pos" class="enemy-cursor '+ enemyHead +'" style="'+ eMarginTop + eMarginLeft+'" > ' + Math.round(d) +' km </div>');
            
          }else{

            if(enemyDegree > coursesPlayerLeft && enemyDegree < coursesPlayerRight) {
              enemyOnCockpit = enemyDegree - coursesPlayerLeft;
              
              eMarginTop = 'margin-top: 85px;';
              eMarginLeft = 'margin-left: '+ enemyOnCockpit*18.5 +'px;';
              $('#enemy-position').append('<div id="enemy-' + keyVal + '-pos" class="enemy-cursor '+ enemyHead +'" style="'+ eMarginTop + eMarginLeft+'" >' + Math.round(d) +' km </div>');
            } 
          }
          
          //console.log('show enemy ' + showEnemy + ' L: ' + coursesPlayerLeft + ' , R: ' + coursesPlayerRight + ' ' + ' Pdegree: ' + player.degree);


          $('#mapbox').append( $('<div id="enemy-'+ keyVal+'" class="mapenemy" style="margin-left:'+ enemyX + 'px;margin-top:'+ enemyY +'px;"></div>'));
          $('#enemy-'+keyVal).rotate(userList[keyVal]['degree']);
           
          var getEnemy = keyVal;
          var misillePro = d/10;
          $('#enemyStatus').prepend(
            '<div id="distance-enemy-' + keyVal + 
            '" class="distance-enemy"><p>Enemy '+ getEnemy +' (' + Math.round(d) +
            ' km) <br> ETA missile hit : ' + Math.round(misillePro) + ' seconds<br/> ' + 
            ' </p></div>');
        };
      };

      if(countEnemy < 1){
          $('#enemyStatus').append('<div id="distance-enemy" class="distance-enemy"> No enemy</div>');
      };

      $('#statusUser').empty().append('<div></div>').html("<strong> Latitude, Longitude</strong> <br>" + player['latitude'] + ',' + player['longitude']);

    };

    $('a.launchmisille').click(function() { 
      now.launchMissile();

      return false;
    });

    now.updateLaunch = function(status) {
        $('#notification').empty();
        $('#notification').append('<div class="alert-message error">' + status + '</span>');
    };
    
    now.updateStatusMissile = function(status) {
        $('#notification').empty();
        $('#notification').prepend('<div class="alert-message error">' + status + '</span>');
    };
    
    now.updateDistance = function(player, enemies){
      $('#distance').empty().append('<div></div>').html("Latitude &amp; longitude<br/>" + player);
    };
    
  });


.container
  .row
    .span10#cockpit
      #enemy-position
      #cockpit-images
        img(id="cockpit-viewer", src='/images/bg.png')
      #cockpit-maps
        #cockpit-small-shots
        #cockpit-medium-shots
        .clearfix
 
  .row
    .span6#planemap
      #mapbox-wrap      
        #mapbox
        .clearfix

    .span5.whiteplace
      #player
        #begining-game
          h2 preparing data ....
        #distance
        #degrees
          <b>Plane Degree</b>
          #userdegree 
            p 0 &deg;
        #speedo
          <b>Speed</b>
          #userspeed 
            p 1 km/s
        #statusUser 

      #enemyStatus
        <strong>Enemy List</strong><br/>

      #missileOptions
        a(href="#",class="launchmisille") Shots!

      #notification
        
      #guide
        p
          | 1. Use Left - Right key to move.<br>
          | 2. Up - Down key to +/- speed (1-5 km).<br>
          | 3. Missile works if you're behind the enemy.<br>
